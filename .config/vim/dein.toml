# ====================n
# Package Manager
# ====================-

[[plugins]]
repo = 'Shougo/dein.vim'
if = 'has("python3")'

# ====================-
# Completion
# ====================-

# for NVIM
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
on_i = 1
hook_add = '''
let g:deoplete#enable_at_startup = 1      "enable deoplete at vim startup
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0   "let matcher ignore case
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#enable_fuzzy_completion = 1   "fuzzy match
let g:deoplete#max_list = 1000
let g:deoplete#sources = {}
let g:deoplete#sources._ = ['file', 'neosnippet']
'''

[[plugins]] # カッコの補完など
repo = 'cohama/lexima.vim'
on_i = 1

# ====================-
# Snipetts
# ====================-

# [[plugins]]
# repo = 'SirVer/ultisnips'
# on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_add = '''

" key mappings
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

# ====================-
# FileTree
# ====================-

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''

" key mappings
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" nerdtree icon settings
let g:NERDTreeShowHidden = 1 " 隠しフォルダを表示する
let g:NERDTreeShowBookmarks=1 " ブックマークを初期表示
let g:NERDTreeWinSize=35 " 表示横幅
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
let NERDTreeIgnore =
            \ ['\.pyc', '\.git$', '\~$', '\.swo$', '\.hg', '\.svn', '\.bzr', '\.DS_Store']

" NOTE: use ascii instead of utf-8
" see https://github.com/Xuyuanp/nerdtree-git-plugin/issues/34
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "<MOD>",
      \ "Staged"    : "<STG>",
      \ "Untracked" : "<UTR>",
      \ "Renamed"   : "<RNM>",
      \ "Unmerged"  : "<UMG>",
      \ "Deleted"   : "<DEL>",
      \ "Dirty"     : "<DTY>",
      \ "Clean"     : "<CLN>",
      \ "Unknown"   : "<NEW>"
      \ }


" auto refresh nerdtre every 15s
" set autoread
" au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

" How can I open a NERDTree automatically when vim starts up if no files were specified?
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'ryanoasis/vim-devicons'
depends = ['scrooloose/nerdtree']
hook_add = '''
" nerd tree webdev icon
let g:webdevicons_enable_nerdtree = 1

let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' ' " アイコンのパディング
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0
'''

# NOTE: ホワイトリストでもくっそ思いのでとりあえず無効化
# [[plugins]]
# repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
# depends = ['scrooloose/nerdtree']
# hook_add = '''
# " NOTE: ホワイトリストでもくっそ思いのでとりあえず無効化!
# vim-nerdtree-syntax-highlightが重いのでホワイトリスト形式で表示させる
# let g:NERDTreeSyntaxDisableDefaultExtensions = 1
# let g:NERDTreeDisableExactMatchHighlight = 1
# let g:NERDTreeDisablePatternMatchHighlight = 1
# let g:NERDTreeSyntaxEnabledExtensions =
#       \['c',
#       \'h',
#       \'c++',
#       \'go',
#       \'sh',
#       \'python',
#       \'js',
#       \'css',
#       \'md',
#       \'coffee',
#       \'java',
#       \'.sql',
#       \'xml',
#       \'json']
# '''


# ====================-
# Sign column
# ====================-

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" left git diff bar
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
" 500だと保存時エラーが出るのため
let g:gitgutter_max_signs = 1000
'''

# ====================-
# StatusBar
# ====================-

[[plugins]]
repo = 'bling/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
" statusline
let g:airline_theme = 'solarized'
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#branch#enabled=1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

" tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0 " タブにバッファ表示しない
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

# ====================-
# Appearance
# ====================-

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1 " ガイドの幅
let g:indent_guides_color_change_percent = 10

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=darkgrey
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=grey
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
" Solarized
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_degrade = 0
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italic = 1
let g:solarized_contrast = 'normal'
let g:solarized_visibility = 'normal'
colorscheme solarized
'''

# ====================-
# Syntax checker
# ====================-

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_echo_msg_format = '%severity%: %linter%: %s'
let g:ale_sign_column_always = 1
let g:ale_sign_error = ' '
let g:ale_sign_warning = ' '
let g:ale_statusline_format = ['  %d', '  %d', '  ']
let g:ale_linters = {
      \ 'c': [ 'cppcheck' ],
      \ 'python': [ 'flake8' ],
      \ 'go': [ 'gofmt', 'go vet', 'golint' ],
      \ 'javascript': [ 'eslint' ],
      \ 'jsx': [ 'eslint' ],
      \ 'css': [ 'stylelint' ],
      \ 'html': ['htmlhint'],
      \ }

" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
'''

# [[plugins]]
# repo = 'vim-syntastic/syntastic'

# ====================-
# Finder
# ====================-

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
hook_add = '''

" ファイルタイプを変更する
nmap <silent> <C-j><C-t> :<C-u>Denite filetype<CR>
" 同一内検索
nmap <silent> <C-j><C-j> :<C-u>Denite line<CR>
" 全文検索
nmap <silent> <C-j><C-g> :<C-u>Denite grep<CR>
" 全文検索(プレビュー)
nmap <silent> <C-j><C-p> :<C-u>Denite -auto_preview grep<CR>
" ヘルプ
nmap <silent> <C-j><C-h> :<C-u>Denite help<CR>
" コマンド
nmap <silent> <C-j><C-c> :<C-u>Denite command<CR>
" ファイルを開く用(rec: Recursive?)
nmap <silent> <C-j><C-f> :<C-u>Denite file_rec<CR>
" ファイルを開く用(mru: Most Recently Used)
nmap <silent> <C-j><C-u> :<C-u>Denite file_mru<CR>
" ヤンク履歴
nmap <silent> <C-j><C-y> :<C-u>Denite neoyank<CR>
" 前回のDeniteバッファを再表示する
nmap <silent> <C-j><C-r> :<C-u>Denite -resume<CR>
'''
hook_post_source = '''
" interface
call denite#custom#option('default', 'prompt', 'λ>')
call denite#custom#option('default', 'vertical_preview', 0)  " 1にすると左側にプレビューが出現
call denite#custom#option('default', 'short_source_names', 1)

call denite#custom#option('grep', 'empty', 0)
call denite#custom#option('grep', 'vertical_preview', 1)
call denite#custom#option('grep', 'auto_highlight', 1)

call denite#custom#option('list', 'quit', 0)
call denite#custom#option('list', 'mode', 'normal')
call denite#custom#option('list', 'winheight', 8)

" Key mapping
call denite#custom#map('insert', "<Up>", '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', "<Down>", '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<c-j>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<c-k>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<c-n>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<c-p>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<c-u>', '<denite:scroll_up>' , 'noremap')
call denite#custom#map('insert', '<c-d>', '<denite:scroll_down>' , 'noremap')

" tabでアクションはめんどくさいので
call denite#custom#map('insert', '<c-e>', '<denite:do_action:delete>', 'noremap')
call denite#custom#map('insert', '<c-w>', '<denite:do_action:new>', 'noremap')
call denite#custom#map('insert', '<c-t>', '<denite:do_action:tabopen>', 'noremap')
call denite#custom#map('insert', '<c-v>', '<denite:do_action:preview>', 'noremap')
call denite#custom#map('insert', "-", '<denite:do_action:split>')
call denite#custom#map('insert', "|", '<denite:do_action:vsplit>')

" see https://github.com/Shougo/denite.nvim/blob/642b9452a8cef9cb5cd0da9ef17b3da29b6b61a1/rplugin/python3/denite/ui/action.py#L232

'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.vim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['denite.vim']

# [[plugins]]
# repo = 'ctrlpvim/ctrlp.vim'
# hook_add = '''
# let g:ctrlp_max_files=200
# let g:ctrlp_max_depth=40
# let g:ctrlp_custom_ignore = 'node_modules\|vendor'
# let g:ctrlp_show_hidden = 1
# '''

# ====================-
# Ctags
# ====================-

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''

" key mapings
nmap <F9> :TagbarToggle<CR>

" It depends package below
" Ctags
" https://github.com/majutsushi/tagbar
" go get -u github.com/jstemmer/gotags

" NOTE:
" + - で開閉する

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }
'''

[[plugins]]
repo = 'soramugi/auto-ctags.vim'

# ====================-
# Useful tools
# ====================-

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'osyo-manga/vim-over'

[[plugins]] # for searching
repo = 'haya14busa/incsearch.vim'
hook_add = '''
" key mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

'''

[[plugins]] # for comment out
repo = 'tyru/caw.vim'
hook_add = '''
" key mappings
" コメントアウト用(tabもしくはC-iでコメントout)
nmap <C-i> <Plug>(caw:hatpos:toggle)
vmap <C-i> <Plug>(caw:hatpos:toggle)
'''

# [[plugins]] # for pasting
# repo = 'ConradIrwin/vim-bracketed-paste'

# for run command quickly
# <Leader>r
[[plugins]]
repo = 'thinca/vim-quickrun'

# [[plugins]] # for simplifiles
# repo = 'AndrewRadev/splitjoin.vim'

# [[plugins]]
# repo = 'sjl/gundo.vim'

# ====================-
# English
# ====================-

# [[plugins]]
# repo     = 'ujihisa/neco-look'

# ====================-
# Others
# ====================-

# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# build = 'make'
#

